'use strict';

// Пример №1

// console.log(1);

// setTimeout(() => {
// 	setTimeout(() => {
// 		console.log(2);
// 	}, 0);
// 	console.log(3);
// }, 0);

// console.log(4);

// Порядок выполененя: 1, 4, 3, 2

//========================================================================================================================================================

// Пример №2

// const promise = new Promise((resolve) => {
// 	console.log(1); // синхронная операция, выполнится сразу как только дойдет код
// 	resolve(2); // асинхронная операция!!!
// });

// console.log(3);

// promise.then(res => console.log(res));

// console.log(4);

// Порядок выполененя: 1, 3, 4, 2

// ВАЖНО ПОМНИТЬ!!!
// В Promise как конструктор в функции executor
// все операции кроме асинхронных + resolve и reject
// РАБОТАЮТ КАК СИНХРОННЫЕ И ВЫПОЛНЯТСЯ БУДУТ ПОСЛЕДОВАТЕЛЬНО (КАК ОБЫЧНЫЕ СИНХРОННЫЕ ОПЕРАЦИИ)

//========================================================================================================================================================

// Пример №3

// setTimeout(() => {
// 	console.log(1);
// }, 0);

// console.log(2);

// Promise.resolve(3).then(res => console.log(res));

// console.log(4);


// Порядок выполененя: 2, 4, 3, 1

// ВАЖНО ПОМНИТЬ!!!
// Promise относиться к MicroTask Queue
// setTimeout относиться к MacroTask Queue
// СПЕРВА ВЫПОЛНЯЮТСЯ ВСЕ MicroTask
// И ТОЛЬКО ПОТОМ начинают выполнятся поочередно MacroTask

// P.S Если код из MacroTask создает код MicroTask, то
// код MicroTask выполниться первым и только потом
// остальные MacroTask продолжат выполняться по очереди